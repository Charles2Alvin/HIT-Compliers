class	<JAVA,->	1
QuickSort	<IDN,QuickSort>	1
{	<delimiter,{>	1
private	<ACESS,->	2
int	<INT,->	2
[	<delimiter,[>	2
]	<delimiter,]>	2
array	<IDN,array>	2
;	<delimiter,;>	2
public	<ACESS,->	3
void	<C,->	3
sort	<IDN,sort>	3
(	<delimiter,(>	3
int	<INT,->	3
[	<delimiter,[>	3
]	<delimiter,]>	3
array	<IDN,array>	3
,	<delimiter,,>	3
int	<INT,->	3
low	<IDN,low>	3
,	<delimiter,,>	3
int	<INT,->	3
high	<IDN,high>	3
)	<delimiter,)>	3
{	<delimiter,{>	3
if	<IF,->	4
(	<delimiter,(>	4
low	<IDN,low>	4
<	<delimiter,<>	4
high	<IDN,high>	4
)	<delimiter,)>	4
{	<delimiter,{>	4
int	<INT,->	5
index	<IDN,index>	5
=	<OP,=>	5
partition	<IDN,partition>	5
(	<delimiter,(>	5
array	<IDN,array>	5
,	<delimiter,,>	5
low	<IDN,low>	5
,	<delimiter,,>	5
high	<IDN,high>	5
)	<delimiter,)>	5
;	<delimiter,;>	5
sort	<IDN,sort>	6
(	<delimiter,(>	6
array	<IDN,array>	6
,	<delimiter,,>	6
low	<IDN,low>	6
,	<delimiter,,>	6
index	<IDN,index>	6
)	<delimiter,)>	6
;	<delimiter,;>	6
sort	<IDN,sort>	7
(	<delimiter,(>	7
array	<IDN,array>	7
,	<delimiter,,>	7
index	<IDN,index>	7
+	<OP,+>	7
1	<digit,1>	7
,	<delimiter,,>	7
high	<IDN,high>	7
)	<delimiter,)>	7
;	<delimiter,;>	7
}	<delimiter,}>	8
}	<delimiter,}>	9
public	<ACESS,->	10
int	<INT,->	10
partition	<IDN,partition>	10
(	<delimiter,(>	10
int	<INT,->	10
[	<delimiter,[>	10
]	<delimiter,]>	10
array	<IDN,array>	10
,	<delimiter,,>	10
int	<INT,->	10
low	<IDN,low>	10
,	<delimiter,,>	10
int	<INT,->	10
high	<IDN,high>	10
)	<delimiter,)>	10
{	<delimiter,{>	10
int	<INT,->	11
index	<IDN,index>	11
=	<OP,=>	11
low	<IDN,low>	11
;	<delimiter,;>	11
swap	<IDN,swap>	12
(	<delimiter,(>	12
index	<IDN,index>	12
,	<delimiter,,>	12
low	<IDN,low>	12
)	<delimiter,)>	12
;	<delimiter,;>	12
int	<INT,->	13
pivot	<IDN,pivot>	13
=	<OP,=>	13
array	<IDN,array>	13
[	<delimiter,[>	13
low	<IDN,low>	13
]	<delimiter,]>	13
;	<delimiter,;>	13
while	<WHILE,->	14
(	<delimiter,(>	14
low	<IDN,low>	14
<	<delimiter,<>	14
high	<IDN,high>	14
)	<delimiter,)>	14
{	<delimiter,{>	14
while	<WHILE,->	15
(	<delimiter,(>	15
low	<IDN,low>	15
<	<delimiter,<>	15
high	<IDN,high>	15
)	<delimiter,)>	15
{	<delimiter,{>	15
high	<IDN,high>	16
--	<OP,->	16
;	<delimiter,;>	16
}	<delimiter,}>	17
array	<IDN,array>	18
[	<delimiter,[>	18
low	<IDN,low>	18
]	<delimiter,]>	18
=	<OP,=>	18
array	<IDN,array>	18
[	<delimiter,[>	18
high	<IDN,high>	18
]	<delimiter,]>	18
;	<delimiter,;>	18
while	<WHILE,->	19
(	<delimiter,(>	19
low	<IDN,low>	19
<	<delimiter,<>	19
high	<IDN,high>	19
)	<delimiter,)>	19
{	<delimiter,{>	19
high	<IDN,high>	20
++	<OP,->	20
;	<delimiter,;>	20
}	<delimiter,}>	21
array	<IDN,array>	22
[	<delimiter,[>	22
high	<IDN,high>	22
]	<delimiter,]>	22
=	<OP,=>	22
array	<IDN,array>	22
[	<delimiter,[>	22
low	<IDN,low>	22
]	<delimiter,]>	22
;	<delimiter,;>	22
}	<delimiter,}>	23
array	<IDN,array>	24
[	<delimiter,[>	24
low	<IDN,low>	24
]	<delimiter,]>	24
=	<OP,=>	24
pivot	<IDN,pivot>	24
;	<delimiter,;>	24
}	<delimiter,}>	26
public	<ACESS,->	27
void	<C,->	27
swap	<IDN,swap>	27
(	<delimiter,(>	27
int	<INT,->	27
i	<IDN,i>	27
,	<delimiter,,>	27
int	<INT,->	27
j	<IDN,j>	27
)	<delimiter,)>	27
{	<delimiter,{>	27
int	<INT,->	28
temp	<IDN,temp>	28
=	<OP,=>	28
array	<IDN,array>	28
[	<delimiter,[>	28
i	<IDN,i>	28
]	<delimiter,]>	28
;	<delimiter,;>	28
array	<IDN,array>	29
[	<delimiter,[>	29
i	<IDN,i>	29
]	<delimiter,]>	29
=	<OP,=>	29
array	<IDN,array>	29
[	<delimiter,[>	29
j	<IDN,j>	29
]	<delimiter,]>	29
;	<delimiter,;>	29
array	<IDN,array>	30
[	<delimiter,[>	30
j	<IDN,j>	30
]	<delimiter,]>	30
=	<OP,=>	30
temp	<IDN,temp>	30
;	<delimiter,;>	30
}	<delimiter,}>	31
public	<ACESS,->	32
void	<C,->	32
main	<IDN,main>	32
(	<delimiter,(>	32
int	<INT,->	32
y	<IDN,y>	32
)	<delimiter,)>	32
{	<delimiter,{>	32
int	<INT,->	33
i	<IDN,i>	33
=	<OP,=>	33
1	<digit,1>	33
;	<delimiter,;>	33
}	<delimiter,}>	34
}	<delimiter,}>	35
