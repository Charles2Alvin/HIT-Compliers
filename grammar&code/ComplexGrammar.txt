start -> classes
# 类
classes -> classes classes
classes -> class IDN { method }
classes -> class IDN { field method }
# 域和方法
field -> D
field -> access D
method -> method method
method -> type IDN ( ) { P }
method -> type IDN ( args ) { P }
method -> access type IDN ( ) { P }
method -> access type IDN ( args ) { P }
# 参数列表
args -> args , arg
args -> arg
arg -> T IDN
# 访问控制符
access -> public
access -> private
access -> protected
# 程序主体
P -> P P
P -> D
P -> S
S -> S S
# 声明语句
D -> D D
D -> D S
D -> T IDN ;
D -> T M ;
M -> m
M -> M , m
m -> IDN = E ;
D -> T IDN = E ;
D -> T IDN = { A } ;
T -> type
T -> type [ ]
A -> E
A -> A , E
# 数据类型
type -> int 
type -> float
type -> long
type -> double
type -> char
type -> void
# 赋值语句
S -> IDN = E ;
S -> IDN op ;
S -> op IDN ;
op -> ++
op -> --
S -> L = E ;
S -> R ;
# 返回值
R -> return E 
R -> return 
# 函数调用
S -> call ;
call -> IDN ( )
call -> IDN ( param )
param -> E
param -> param , E
# 类的创建
S -> IDN IDN = new IDN ( ) ;
S -> IDN IDN = new IDN ( param ) ;
# 调用方法
S -> IDN func ;
func -> F
func -> func F
F -> @ IDN ( )
F -> @ IDN ( param )
# 运算表达式
E -> E + E
E -> E * E
E -> E - E
E -> E / E
E -> - E
E -> ( E )
E -> IDN
E -> digit
E -> L
L -> IDN [ E ]
L -> L [ E ]
# 函数调用
E -> call
# 控制流语句
S -> if ( B ) { P }
S -> if ( B ) { P } else { P }
S -> while ( B ) { P }
S -> for ( S B ; IDN op ) { P }
S -> for ( S B ; IDN = E ) { P }
# 布尔表达式
B -> B && B
B -> B || B
B -> E relop E
B -> true
B -> false
# 关系运算符
relop -> <
relop -> <=
relop -> ==
relop -> !=
relop -> >
relop -> >=
relop -> &&







